//go:build runtime
// +build runtime

package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"time"

	ex "{{ .ImportPath }}"

	"github.com/asphaltbuffet/advent-of-code/pkg/runners"
)

func sendResult(taskID string, ok bool, output string, duration float64) {
	x := runners.Result{
		TaskID:   taskID,
		Ok:       ok,
		Output:   output,
		Duration: duration,
	}
	dat, err := json.Marshal(&x)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(dat))
}

func run() error {
	reader := bufio.NewReader(os.Stdin)
	for {
		task := new(runners.Task)
		taskBytes, err := reader.ReadBytes('\n')
		if err != nil {
			return err
		}
		if err := json.Unmarshal(taskBytes, task); err != nil {
			return err
		}

		var run func() (interface{}, error)

		switch task.Part {
		case runners.PartOne:
			run = func() (interface{}, error) {
				return (ex.Exercise{}).One(task.Input)
			}
		case runners.PartTwo:
			run = func() (interface{}, error) {
				return (ex.Exercise{}).Two(task.Input)
			}
		case runners.Visualize:
			run = func() (interface{}, error) {
				return "", (ex.Exercise{}).Vis(task.Input, task.OutputDir)
			}
		}

		startTime := time.Now()
		res, err := run()
		runningTime := time.Since(startTime).Seconds()

		if err != nil {
			sendResult(task.TaskID, false, err.Error(), runningTime)
		} else {
			sendResult(task.TaskID, true, fmt.Sprintf("%v", res), runningTime)
		}

	}

	return nil
}

func main() {
	if err := run(); err != nil {
		panic(err)
	}
}

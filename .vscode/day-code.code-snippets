{
	// ref: https://code.visualstudio.com/docs/editor/userdefinedsnippets
	// Place your advent-of-code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create new day": {
		"scope": "go",
		"prefix": "day",
		"body": [
			"package aoc${year}",
			"",
			"import (",
			"\t\"github.com/fatih/color\"",
			"\t\"github.com/spf13/cobra\"",
			"",
			"\taoc \"github.com/asphaltbuffet/advent-of-code/pkg/utilities\"",
			")",
			"",
			"func init() { //nolint:gochecknoinits // init needed to register command",
			"\tnewDay${day}Command()",
			"}",
			"",
			"func newDay${day}Command() *cobra.Command {",
			"\tcmd := &cobra.Command{",
			"\t\tUse:   \"${day}\",",
			"\t\tShort: \"day ${day} exercise for 20$year AoC\",",
			"\t\tRun: func(cmd *cobra.Command, args []string) {",
			"\t\t\td, err := aoc.NewExercise(cmd.Parent().Name(), cmd.Name())",
			"\t\t\tif err != nil {",
			"\t\t\t\treturn",
			"\t\t\t}",
			"",
			"\t\t\tcolor.Set(color.FgYellow)",
			"",
			"\t\t\tcmd.Printf(\"┌──────────────────┒\\n\")",
			"\t\t\tcmd.Printf(\"│      Day %-2s      ┃\\n\", cmd.Name())",
			"\t\t\tcmd.Printf(\"┕━━━━━━━━━━━━━━━━━━┛\\n\")",
			"",
			"\t\t\tcolor.Unset()",
			"",
			"\t\t\tgot := D${day}P1(d.PartOne.Input)",
			"\t\t\tcmd.Printf(\"Part 1: %s\\n\", got)",
			"",
			"\t\t\tgot = D${day}P2(d.PartTwo.Input)",
			"\t\t\tcmd.Printf(\"Part 2: %s\\n\", got)",
			"\t\t},",
			"\t}",
			"",
			"\tGet20${year}Command().AddCommand(cmd)",
			"",
			"\treturn cmd",
			"}",
			"",
			"// D${day}P1 returns the solution for 20${year} day ${day} part 1",
			"// answer:",
			"func D${day}P1(data []string) string {",
			"\treturn \"not implemented\"$0",
			"}",
			"",
			"// D${day}P2 returns the solution for 20${year} day ${day} part 2",
			"// answer:",
			"func D${day}P2(data []string) string {",
			"\treturn \"not implemented\"",
			"}",
			""
		]
	}
}